#include "pch.h"
#include<iostream>
using	namespace std;
class SubAarray {
public :
	int low, high;
	int maxSum;
};
SubAarray FindMaxCrossing(int A[], int low, int mid, int high)
{//low and high is the index of array
	SubAarray max;
	int sum = 0;
	int left_max = -65532, right_max = -65532;
	for (int i = mid; i >= low; i--)
	{
		sum += A[i];
		if (sum > left_max)
		{
			left_max = sum;
			max.low = i;
		}
		sum = 0;
		for (int j = mid + 1; j <= high; j++)
		{
			sum += A[j];
			if (sum > right_max)
			{
				right_max = sum;
				max.high = j;
			}
		}
		max.maxSum = right_max + left_max;
		return max;
	}
}
SubAarray RecursiveFindMaxSubArray(int A[], int low, int high) 
{
	if (low == high)
	{
		SubAarray max;
		max.low = low;
		max.high = high;
		max.maxSum = A[low];
		return max;
	}
	int mid = (low + high) / 2;
	SubAarray leftMaxArray,rightMaxArray;
	SubAarray crossMaxArray;
	leftMaxArray = RecursiveFindMaxSubArray(A, low, mid);
	rightMaxArray = RecursiveFindMaxSubArray(A, mid + 1, high);
	crossMaxArray = FindMaxCrossing(A, low, mid, high);
	if (leftMaxArray.maxSum > rightMaxArray.maxSum && leftMaxArray.maxSum > crossMaxArray.maxSum)
	{
		return leftMaxArray;
	}
	else if (rightMaxArray.maxSum > leftMaxArray.maxSum&&rightMaxArray.maxSum > crossMaxArray.maxSum)
		return rightMaxArray;
	else
		return crossMaxArray;
}
int main() {
	{
		int A[16] = { 13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7 };
		//FindMaxSubArray(A);
		SubAarray x;
		x=RecursiveFindMaxSubArray(A, 0, 15);
		cout << x.low  << "  \n  " <<x.high << "   \n  " << x.maxSum;
	}
}
